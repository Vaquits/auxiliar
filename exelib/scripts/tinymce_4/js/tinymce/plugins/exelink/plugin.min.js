/**
 * plugin.js
 *
 * Released under LGPL License.
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */
 
/**
 * "Include file information" options by José Ramón Jiménez Reyes (original idea and previous code) and Ignacio Gros (http://gros.es/)
 * The "Anchors and nodes" list was part of eXeLearning.org's version. Adapted by Ignacio Gros (http://gros.es/)
 
 * Released under Attribution 4.0 International License.
 * License: http://creativecommons.org/licenses/by/4.0/
 
 * The rest is just a copy of TinyMCE's plugins\link\plugin.js 
 */  

/*global tinymce:true */

tinymce.PluginManager.add('exelink', function(editor, url) {
	function createLinkList(callback) {
		return function() {
			var linkList = editor.settings.link_list;

			if (typeof linkList == "string") {
				tinymce.util.XHR.send({
					url: linkList,
					success: function(text) {
						callback(tinymce.util.JSON.parse(text));
					}
				});
			} else if (typeof linkList == "function") {
				linkList(callback);
			} else {
				callback(linkList);
			}
		};
	}

	function buildListItems(inputList, itemCallback, startItems) {
		function appendItems(values, output) {
			output = output || [];

			tinymce.each(values, function(item) {
				var menuItem = {text: item.text || item.title};

				if (item.menu) {
					menuItem.menu = appendItems(item.menu);
				} else {
					menuItem.value = item.value;

					if (itemCallback) {
						itemCallback(menuItem);
					}
				}

				output.push(menuItem);
			});

			return output;
		}

		return appendItems(inputList, startItems || []);
	}

	function showDialog(linkList) {
		var data = {}, selection = editor.selection, dom = editor.dom, selectedElm, anchorElm, initialText;
		var win, onlyText, textListCtrl, linkListCtrl, relListCtrl, targetListCtrl, classListCtrl, linkTitleCtrl, value;

		function linkListChangeHandler(e) {
			var textCtrl = win.find('#text');

			if (!textCtrl.value() || (e.lastControl && textCtrl.value() == e.lastControl.text())) {
				textCtrl.value(e.control.text());
			}

			win.find('#href').value(e.control.value());
		}

		function updateText() {
			if (!initialText && data.text.length === 0 && onlyText) {
				this.parent().parent().find('#text')[0].value(this.value());
			}
		}

		function urlChange(e) {
			var meta = e.meta || {};

			if (linkListCtrl) {
				linkListCtrl.value(editor.convertURL(this.value(), 'href'));
			}

			tinymce.each(e.meta, function(value, key) {
				win.find('#' + key).value(value);
			});

			if (!meta.text) {
				updateText.call(this);
			}
		}
		
		function getAnchorList() {
			
			var list = [
				{text: '---', value: ''},
				{text: _('Link to the elp file (it will be exported)'), value: 'exe-package:elp'}
			];
			
			var ed = editor, nodes = ed.dom.select('a'), name, i, len, html = "";

			for (i=0, len=nodes.length; i<len; i++) {
				if ((name = ed.dom.getAttrib(nodes[i], "name")) != "")
					list.push( {text: name, value: '#'+name} );

				if ((name = nodes[i].id) != "" && !nodes[i].href)
					list.push( {text: name, value: '#'+name} );
			}
			
			if (typeof tinymce_anchors=="object") {
				for (i=0;i<tinymce_anchors.length;i++){
					var n = tinymce_anchors[i].replace("exe-node:",_("Node")+":");
					var checkN = n.split("#");
					if (checkN[1]=="auto_top") n = n.replace("#auto_top","");
					n = decodeURIComponent(n);
					var newOption = {text: n, value: tinymce_anchors[i]};
					if (list.indexOf(newOption)==-1) list.push( newOption );
				}
			}

			return list;
		}

		function isOnlyTextSelected(anchorElm) {
			var html = selection.getContent();

			// Partial html and not a fully selected anchor element
			if (/</.test(html) && (!/^<a [^>]+>[^<]+<\/a>$/.test(html) || html.indexOf('href=') == -1)) {
				return false;
			}

			if (anchorElm) {
				var nodes = anchorElm.childNodes, i;

				if (nodes.length === 0) {
					return false;
				}

				for (i = nodes.length - 1; i >= 0; i--) {
					if (nodes[i].nodeType != 3) {
						return false;
					}
				}
			}

			return true;
		}

		selectedElm = selection.getNode();
		anchorElm = dom.getParent(selectedElm, 'a[href]');
		onlyText = isOnlyTextSelected();

		data.text = initialText = anchorElm ? (anchorElm.innerText || anchorElm.textContent) : selection.getContent({format: 'text'});
		data.href = anchorElm ? dom.getAttrib(anchorElm, 'href') : '';

		if (anchorElm) {
			data.target = dom.getAttrib(anchorElm, 'target');
		} else if (editor.settings.default_link_target) {
			data.target = editor.settings.default_link_target;
		}

		if ((value = dom.getAttrib(anchorElm, 'rel'))) {
			data.rel = value;
		}

		if ((value = dom.getAttrib(anchorElm, 'class'))) {
			data['class'] = value;
		}

		if ((value = dom.getAttrib(anchorElm, 'title'))) {
			data.title = value;
		}

		if (onlyText) {
			textListCtrl = {
				name: 'text',
				type: 'textbox',
				size: 40,
				label: 'Text to display',
				onchange: function() {
					data.text = this.value();
				}
			};
		}

		if (linkList) {
			linkListCtrl = {
				type: 'listbox',
				label: 'Link list',
				values: buildListItems(
					linkList,
					function(item) {
						item.value = editor.convertURL(item.value || item.url, 'href');
					},
					[{text: 'None', value: ''}]
				),
				onselect: linkListChangeHandler,
				value: editor.convertURL(data.href, 'href'),
				onPostRender: function() {
					/*eslint consistent-this:0*/
					linkListCtrl = this;
				}
			};
		}

		if (editor.settings.target_list !== false) {
			if (!editor.settings.target_list) {
				editor.settings.target_list = [
					{text: 'None', value: ''},
					{text: 'New window', value: '_blank'}
				];
			}

			targetListCtrl = {
				name: 'target',
				type: 'listbox',
				label: 'Target',
				values: buildListItems(editor.settings.target_list)
			};
		}

		if (editor.settings.rel_list) {
			relListCtrl = {
				name: 'rel',
				type: 'listbox',
				label: 'Rel',
				values: buildListItems(editor.settings.rel_list)
			};
		}

		if (editor.settings.link_class_list) {
			classListCtrl = {
				name: 'class',
				type: 'listbox',
				label: 'Class',
				values: buildListItems(
					editor.settings.link_class_list,
					function(item) {
						if (item.value) {
							item.textStyle = function() {
								return editor.formatter.getCssText({inline: 'a', classes: [item.value]});
							};
						}
					}
				)
			};
		}

		if (editor.settings.link_title !== false) {
			linkTitleCtrl = {
				name: 'title',
				type: 'textbox',
				label: 'Title',
				value: data.title
			};
		}
		
		popupFields = [
			{
				name: 'popupurl',
				type: 'textbox',
				size: 40,
				label: 'Popup URL'
			},
			{
				name: 'popupname',
				type: 'textbox',
				label: 'Window Name'
			},
			{
				type: 'container',
				label: 'Size',
				layout: 'flex',
				direction: 'row',
				align: 'center',
				spacing: 5,
				items: [
					{name: 'popupwidth', type: 'textbox', maxLength: 4, size: 3, ariaLabel: 'Width'},
					{type: 'label', text: 'x'},
					{name: 'popupheight', type: 'textbox', maxLength: 4, size: 3, ariaLabel: 'Height'},
					{type: 'label', text: 'px'}
				]
			},
			{
				type: 'container',
				label: 'Position (X/Y)',
				layout: 'flex',
				direction: 'row',
				align: 'center',
				spacing: 5,
				items: [
					{name: 'popupleft', type: 'textbox', maxLength: 4, size: 3, ariaLabel: 'Left'},
					{type: 'label', text: '/'},
					{name: 'popuptop', type: 'textbox', maxLength: 4, size: 3, ariaLabel: 'Top'},
					{type: 'label', text: 'c/c = '},
					{type: 'label', text: 'Center'}
				]
			},
			{type: 'label', text: 'Options', style: 'font-weight:bold'},
			{
				type: 'container',
				layout: 'flex',
				direction: 'row',
				align: 'center',
				spacing: 5,
				items: [
					{
						name: 'popuplocation', 
						type: 'checkbox',
						minWidth: 200,
						checked: false, 
						text: 'Show Location Bar'
					},
					{
						name: 'popupscrollbars', 
						type: 'checkbox',
						minWidth: 200,
						checked: false, 
						text: 'Show Scrollbars'
					}
				]
			},
			{
				type: 'container',
				layout: 'flex',
				direction: 'row',
				align: 'center',
				spacing: 5,
				items: [
					{
						name: 'popupmenubar', 
						type: 'checkbox',
						minWidth: 200,
						checked: false, 
						text: 'Show Menu Bar'
					},
					{
						name: 'popupresizable', 
						type: 'checkbox',
						minWidth: 200,
						checked: false, 
						text: 'Make Window Resizable'
					}
				]
			},
			{
				type: 'container',
				layout: 'flex',
				direction: 'row',
				align: 'center',
				spacing: 5,
				items: [
					{
						name: 'popuptoolbar', 
						type: 'checkbox',
						minWidth: 200,
						checked: false, 
						text: 'Show Toolbars'
					},
					{
						name: 'popupstatus', 
						type: 'checkbox',
						minWidth: 200,
						checked: false, 
						text: 'Show Status Bar'
					}
				]
			},
			{
				type: 'container',
				layout: 'flex',
				direction: 'row',
				align: 'center',
				spacing: 5,
				items: [
					{
						name: 'popupreturn', 
						type: 'checkbox',
						checked: true, 
						text: "Insert 'return false'"
					}
				]
			}								
		]

		win = editor.windowManager.open({
			title: 'Insert link',
			data: data,
			bodyType: 'tabpanel',
			body: [
				{
					title: _('General'),
					type: 'form',
					items: [
						{
							name: 'href',
							type: 'filepicker',
							filetype: 'file',
							size: 40,
							autofocus: true,
							label: 'Url',
							onchange: urlChange,
							onkeyup: updateText
						},
						{
							type: 'listbox',
							minWidth: 150,
							name: 'anchorsandnodes',
							label: _("Anchors, nodes or elp"),
							'values': getAnchorList(),
							onselect: function(){
								win.find("#href")[0].value(this.value());
							}
						},				
						textListCtrl,
						linkTitleCtrl,
						linkListCtrl,
						targetListCtrl,
						relListCtrl,
						classListCtrl,
						{
							name: 'includefileinfo', 
							type: 'checkbox',
							checked: false, 
							text: _('Include File Information'),
							onchange: function(){
								if ($exeTinyMCE.activeDialog.tmp!='noAjax') {
									toggleFileInfoBlock(this.state.get("checked"));
								}
								$exeTinyMCE.activeDialog.tmp = '';
							}
						},
						{
							name: 'fileInfoSize',
							id: 'fileInfoSize',
							type: 'textbox',
							label: 'File size',
							onkeyup: function(e){
								
								var v = this.value();
								var last = v[v.length-1];
								var previous = v.slice(0,v.length-1);
								var deleteIt = true;
								if (last=="." && previous.indexOf(".")==-1 && previous.indexOf(",")==-1) deleteIt = false;
								else if (last=="," && previous.indexOf(",")==-1 && previous.indexOf(".")==-1) deleteIt = false;
								else if (!isNaN(last)) deleteIt = false;
								
								if (deleteIt) v = previous;
								this.value(v.replace(/ /g,''));
								
							}
						},	
						{
							name: 'fileInfoSizeInKB',
							type: 'textbox',
							visible: false
						},					
						{
							type: 'listbox',
							name: 'fileInfoUnit',
							id: 'fileInfoUnit',
							label: 'Unit',
							'values': [
								{value: '', text: 'Bytes'},
								{value: 'KB', text: 'KiloBytes'},
								{value: 'MB', text: 'MegaBytes'}
							],
							onselect : function(){
								recalcFileSize(this.value());
							}
						},
						{
							name: 'fileInfoExtension',
							id: 'fileInfoExtension',
							type: 'textbox',
							label: 'File extension',
							value: data.title
						}
					]
				},
				{
					title: _('Popup'),
					type: 'form',
					items: [
						{
							name: 'ispopup', 
							type: 'checkbox',
							checked: false, 
							text: 'JavaScript Popup',
							onchange: function(){
								var f = $("#javascriptPopupForm");
								if (this.checked()) f.show();
								else f.hide();
							}
						},
						{
							type: 'form',
							id: 'javascriptPopupForm',
							items: popupFields
						}
					]
				},	
				{
					title: 'Events',
					type: 'form',
					items: [
						{
							name: 'onfocus',
							type: 'textbox',
							label: 'onfocus'
						},
						{
							name: 'onblur',
							type: 'textbox',
							label: 'onblur'
						},
						{
							name: 'onclick',
							type: 'textbox',
							label: 'onclick'
						},
						{
							name: 'ondblclick',
							type: 'textbox',
							label: 'ondblclick'
						},
						{
							name: 'onmouseover',
							type: 'textbox',
							label: 'onmouseover'
						},
						{
							name: 'onmousemove',
							type: 'textbox',
							label: 'onmousemove'
						},
						{
							name: 'onmouseout',
							type: 'textbox',
							label: 'onmouseout'
						}
					]
				}				
			],
			onSubmit: function(e) {
				/*eslint dot-notation: 0*/
				var href;
                
                data = tinymce.extend(data, e.data);
				href = data.href;
				
				// JavaScript Popup
				var onclick = "";
				if (win.find("#ispopup")[0].checked()==true) {
					onclick = "window.open(";
					// Popup URL
					var popupURL = win.find("#popupurl")[0].value();
					if (popupURL=="" || popupURL=="this.href") {
						onclick += "this.href";
					} else {
						if (href=="") {
							href = popupURL;
							data.href = href;
							onclick += "this.href";
						} else {
							onclick += "'"+popupURL+"'";
						}
					}
					// Popup name
					var popupName = win.find("#popupname")[0].value();
					if (popupName=="") popupName = "eXeLearningPopup";
					onclick += ",'"+popupName+"'";
					// Options
					onclick +=",'";
					if (win.find("#popuplocation")[0].checked()==true) onclick += "location=yes,";
					if (win.find("#popupscrollbars")[0].checked()==true) onclick += "scrollbars=yes,";
					if (win.find("#popupmenubar")[0].checked()==true) onclick += "menubar=yes,";
					if (win.find("#popupresizable")[0].checked()==true) onclick += "resizable=yes,";
					if (win.find("#popuptoolbar")[0].checked()==true) onclick += "toolbar=yes,";
					if (win.find("#popupstatus")[0].checked()==true) onclick += "status=yes,";
					// Size
					var popupWidth = win.find("#popupwidth")[0].value();
					if (popupWidth=="") popupWidth = 600;
					onclick += "width=" + popupWidth + ",";
					var popupHeight = win.find("#popupheight")[0].value();
					if (popupHeight=="") popupHeight = 400;
					onclick += "height=" + popupHeight + ",";
					// Position
					var popupLeft = win.find("#popuptop")[0].value();
					if (popupLeft!="" && popupLeft!="c") onclick += "left=" + popupLeft + ",";
					else onclick += "left='+(screen.availWidth/2-" + (popupWidth/2) + ")+',";					
					var popupTop = win.find("#popuptop")[0].value();
					if (popupTop!="" && popupTop!="c") onclick += "top=" + popupTop + ",";
					else onclick += "top='+(screen.availHeight/2-" + (popupHeight/2) + ")+',";					
					// Close...
					if (onclick.charAt(onclick.length-1) == ',') onclick = onclick.substring(0, onclick.length-1);					
					onclick += "');"
					
					// Other onclick events:
					onclick += win.find("#onclick")[0].value();
					var lastChar = onclick.slice(-1);
					if (lastChar!=";") onclick += ";";
					
					// Return
					if (win.find("#popupreturn")[0].checked()==true) onclick += 'return false;'
					// Save that in the right field
					data.onclick = onclick;
					win.find("#onclick")[0].value(onclick);
					// if (formObj.href.value == "") formObj.href.value = url;
				} else {
					onclick = win.find("#onclick")[0].value();
					data.onclick = onclick;
				}
				
				// Remove onclick if empty
				if (onclick=="") {
					data.onclick = null;
				}
				
				// Events
				// onfocus
				var onfocus = win.find("#onfocus")[0].value();
				if (onfocus!="") data.onfocus = onfocus;
				// onblur
				var onblur = win.find("#onblur")[0].value();
				if (onblur!="") data.onblur = onblur;			
				// ondblclick
				var ondblclick = win.find("#ondblclick")[0].value();
				if (ondblclick!="") data.ondblclick = ondblclick;			
				// onmouseover
				var onmouseover = win.find("#onmouseover")[0].value();
				if (onmouseover!="") data.onmouseover = onmouseover;			
				// onmousemove
				var onmousemove = win.find("#onmousemove")[0].value();
				if (onmousemove!="") data.onmousemove = onmousemove;			
				// onmouseout				
				var onmouseout = win.find("#onmouseout")[0].value();
				if (onmouseout!="") data.onmouseout = onmouseout;		
                
				// File info
				var extraHTMLtoInsert = '';
				if (win.find("#includefileinfo")[0].checked()==true) {
					var fileInfoSize = win.find("#fileInfoSize")[0].value();
					var fileInfoUnit = win.find("#fileInfoUnit")[0].value();
					var fileInfoExtension = win.find("#fileInfoExtension")[0].value();
					if (fileInfoSize!='') {
						if (fileInfoExtension=='') {
							editor.windowManager.alert('Specify the file extension');
							return false;
						}
						var unitAbbr = fileInfoUnit;
						var unitTitle = 'Bytes';
						if (fileInfoUnit == '')	{
							unitAbbr = 'B';
						} else if (fileInfoUnit == 'KB')	{
							unitTitle = 'KiloBytes';
						} else if (fileInfoUnit == 'MB')	{
							unitTitle = 'MegaBytes';
						} 	
						extraHTMLtoInsert = '<span class="exe-link-data file-size"> ('+fileInfoExtension+' - '+fileInfoSize+' <abbr title="'+unitTitle+'" lang="en">'+unitAbbr+'</abbr>)</span>'
						var fileInfoTitle = '['+fileInfoExtension+' - '+fileInfoSize+' '+unitAbbr+']'
						if (data.title!='') fileInfoTitle = ' ' + fileInfoTitle;
						data.title += fileInfoTitle;
					}
				}
                
                // Delay confirm since onSubmit will move focus
				function delayedConfirm(message, callback) {
					var rng = editor.selection.getRng();

					tinymce.util.Delay.setEditorTimeout(editor, function() {
						editor.windowManager.confirm(message, function(state) {
							editor.selection.setRng(rng);
							callback(state);
						});
					});
				}

				function insertLink() {
					var linkAttrs = {
						href: href,
						target: data.target ? data.target : null,
						rel: data.rel ? data.rel : null,
						"class": data["class"] ? data["class"] : null,
						title: data.title ? data.title : null,
						onclick: data.onclick ? data.onclick : null,
						onfocus: data.onfocus ? data.onfocus : null,
						onblur: data.onblur ? data.onblur : null,
						ondblclick: data.ondblclick ? data.ondblclick : null,
						onmouseover: data.onmouseover ? data.onmouseover : null,
						onmousemove: data.onmousemove ? data.onmousemove : null,
						onmouseout: data.onmouseout ? data.onmouseout : null
					};

					if (anchorElm) {
						editor.focus();

						if (onlyText && data.text != initialText) {
							if ("innerText" in anchorElm) {
								anchorElm.innerText = data.text;
							} else {
								anchorElm.textContent = data.text;
							}
						}
						
						var elmSize = anchorElm.nextSibling;
						// File info
						if (elmSize != null && typeof(elmSize.innerHTML) != "undefined" && elmSize.innerHTML != "" && elmSize.nodeName == 'SPAN' && elmSize.className == 'exe-link-data file-size') {
							jQuery(elmSize).before(extraHTMLtoInsert).remove();
						} else {
							jQuery(anchorElm).after(extraHTMLtoInsert);
						}		
						// / File info						

						dom.setAttribs(anchorElm, linkAttrs);												
						selection.select(anchorElm);
						editor.undoManager.add();
					} else {
						if (onlyText) {
							var htmlToInsert = dom.createHTML('a', linkAttrs, dom.encode(data.text));
							editor.insertContent(htmlToInsert+extraHTMLtoInsert);							
						} else {
							jQuery(selectedElm).after(extraHTMLtoInsert);
							// The New eXeLearning (see issue 386)
							if (selectedElm.nodeName=='FIGURE' && selectedElm.className.indexOf(" exe-image")!=-1) {
								linkAttrs.name = null;
								if (selectedElm.firstChild.nodeName=='IMG') {
									// Link the image
									var a = jQuery("a");
									for (var i in linkAttrs) {
										if (linkAttrs[i]) {
											a.attr(i,linkAttrs[i]);
										}
									}
									jQuery(selectedElm.firstChild).wrap(a);
									return;
								} else if (selectedElm.firstChild.nodeName=='A') {
									// Update the link
									anchorElm = selectedElm.firstChild;
									dom.setAttribs(anchorElm, linkAttrs);												
									selection.select(anchorElm);
									editor.undoManager.add();
									return;
								}
							}
							// / The New eXeLearning							
							editor.execCommand('mceInsertLink', false, linkAttrs);
						}
					}
				}

				if (!href) {
					editor.execCommand('unlink');
					return;
				}

				// Is email and not //user@domain.com
				if (href.indexOf('@') > 0 && href.indexOf('//') == -1 && href.indexOf('mailto:') == -1) {
					delayedConfirm(
						'The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?',
						function(state) {
							if (state) {
								href = 'mailto:' + href;
							}

							insertLink();
						}
					);

					return;
				}

				// Is not protocol prefixed
				if ((editor.settings.link_assume_external_targets && !/^\w+:/i.test(href)) ||
					(!editor.settings.link_assume_external_targets && /^\s*www[\.|\d\.]/i.test(href))) {
					delayedConfirm(
						'The URL you entered seems to be an external link. Do you want to add the required http:// prefix?',
						function(state) {
							if (state) {
								href = 'http://' + href;
							}

							insertLink();
						}
					);

					return;
				}

				insertLink();
			}
		});
        
        $exeTinyMCE.activeDialog.win = win;
		
		$("#javascriptPopupForm").hide();
		
		getPreviousValues(win);
        
	}
	
	function recalcFileSize(unit) {
		
		var fileInfoSizeInKB_field = $exeTinyMCE.activeDialog.win.find("#fileInfoSizeInKB");
		var sizeInKB = fileInfoSizeInKB_field.value();
		var sizeField = $exeTinyMCE.activeDialog.win.find("#fileInfoSize");
		
		if (sizeField.value()=="") {
			editor.windowManager.alert('"File size" is empty');	
			$exeTinyMCE.activeDialog.win.find("#fileInfoUnit").value('');
			return false;						
		}
		
		// The AJAX request went wrong, so sizeInKB is empty
		// In that case you might want to type the information
		if (sizeInKB=="") {
			sizeInKB==sizeField.value().replace(',','.');
			fileInfoSizeInKB_field.value(sizeInKB);
			$exeTinyMCE.activeDialog.win.find("#fileInfoUnit").value(unit);
			return false;
		}
		
		var size = '';
		if (unit == '' ) size = sizeInKB;
		else if (unit == 'KB') size = (sizeInKB/1000).toFixed(2);
		else if (unit == 'MB') size = (sizeInKB/1000000).toFixed(2);
		
		if (document.getElementsByTagName("HTML")[0].lang=="es") size = size.replace(".",",");
		
		sizeField.value(size);
		
	}
	
	function toggleFileInfoBlock(toggle,executeAjax) {
		var fields = jQuery("#fileInfoSize,#fileInfoUnit,#fileInfoExtension");
		var labels = jQuery("#fileInfoSize-l,#fileInfoUnit-l,#fileInfoExtension-l");
		var url = $exeTinyMCE.activeDialog.win.find("#href").value();
		if (toggle) {
			if (url=='') {
				editor.windowManager.alert('The Url field is empty');
				$exeTinyMCE.activeDialog.win.find("#includefileinfo").checked(false);
				toggleFileInfoBlock(false);			
			} else {
				fields.prop("disabled",false).css("opacity",1);
				labels.css("opacity",1);
				if (executeAjax==false) return false;
				var xhr = jQuery.ajax({
					type: "GET",
					url: url,
					success: function(res){
						var size = res.length;
						if (size!=0) {
							$exeTinyMCE.activeDialog.win.find("#fileInfoSize").value(size);
							$exeTinyMCE.activeDialog.win.find("#fileInfoSizeInKB").value(size);
							$exeTinyMCE.activeDialog.win.find("#fileInfoUnit").value('');
							var ext = url.split("/");
							ext = ext[ext.length-1].split(".");
							if (ext.length>1) ext = ext[1].split('?')[0];
							else ext = '';
							if (ext=='') {
								// tinymce.activeEditor.windowManager.alert("Could not get the file extension");	
							}
							$exeTinyMCE.activeDialog.win.find("#fileInfoExtension").value(ext);
						} else {
							// tinymce.activeEditor.windowManager.alert("Could not get the file data");
							$exeTinyMCE.activeDialog.win.find("#fileInfoSize").value('');
							$exeTinyMCE.activeDialog.win.find("#fileInfoUnit").value('');
							$exeTinyMCE.activeDialog.win.find("#fileInfoExtension").value('');
						}
					},
					error: function(){
						// tinymce.activeEditor.windowManager.alert("Could not get the file data");
						$exeTinyMCE.activeDialog.win.find("#fileInfoSize").value('');
						$exeTinyMCE.activeDialog.win.find("#fileInfoUnit").value('');
						$exeTinyMCE.activeDialog.win.find("#fileInfoExtension").value('');	
						if (url=="exe-package:elp") {
							editor.windowManager.alert(_("Please don't forget to write the file size."));
							$exeTinyMCE.activeDialog.win.find("#fileInfoExtension").value("elp");
						}
					}
				});
				
			}
		} else {
			fields.prop("disabled","disabled").css("opacity","0.2");
			labels.css("opacity","0.2");
		}		
	}
	
	function getPreviousValues(win) {
		
		// Hide the File Info Block
		toggleFileInfoBlock(false,false); // false = No AJAX request
		
		var elm = editor.selection.getNode();
		
		if (!elm) return false;
		
		// It's a FIGURE with a link, so we select the link
		if (elm.nodeName=='FIGURE' && elm.className.indexOf(" exe-image")!=-1) {
			if (elm.firstChild.nodeName=='A') {
				elm = elm.firstChild;
				var linkAttrs = [
					"href",
					"target",
					"rel",
					"class",
					"title",
					"onclick",
					"onfocus",
					"onblur",
					"ondblclick",
					"onmouseover",
					"onmousemove",
					"onmouseout"
				];
				for (var i=0;i<linkAttrs.length;i++) {
					if (elm[linkAttrs[i]]) {
						var f = win.find("#"+linkAttrs[i])[0];
						if (f) f.value(elm[linkAttrs[i]]);
					}
				}
			}
		}		
		
		// Get the node	or anchor. It might be a link to the elp too.
		var urlField = win.find("#href")[0];
		var href = urlField.value();
		if (href.indexOf("exe-node:")==0 || href.indexOf("#")==0 || href=="exe-package:elp") {
			win.find("#anchorsandnodes")[0].value(href);
		}		
		
		var isLink = false;
		
		var elmSize = "";
		
		if (elm.nodeName=="A") {
			elmSize = elm.nextSibling;
		} else if (elm.parentNode && elm.parentNode.nodeName=="A") {
			elmSize = elm.parentNode.nextSibling;
			elm = elm.parentNode;
		}
		
		// File info
		if (elmSize != "" && elmSize != null && typeof(elmSize.innerHTML) != "undefined" && elmSize.innerHTML != "" && elmSize.nodeName == 'SPAN' && elmSize.className == 'exe-link-data file-size') {
			
			var titleField = win.find("#title")[0];
			var title = titleField.value();
			
			var t = title.replace(/\[.*\]/,"");
			if (t[t.length-1] == " ") t = t.substring(0, t.length - 1);
			titleField.value(t);
			
			var size = elmSize.innerHTML.replace(/<abbr(.)*">/,"").replace("</abbr>","");
			size = size.replace(" (","");
			var parts = size.split(" - ");
			if (parts.length==2) {
				var type = parts[0];
				var p2 = parts[1].split(" ");
				if (p2.length==2) {
					
					// File info checked
					
					$exeTinyMCE.activeDialog.tmp = 'noAjax';
					win.find("#includefileinfo")[0].checked(true);
					
					var sizeField = win.find("#fileInfoSize")[0];
					
					// Get the size
					size = p2[0];
					sizeField.value(size);
					
					size = size.replace(',','.');
					
					// Get the size in KB
					var bytes = "";
					var unit = p2[1].replace(")","");
					if (unit == "B") bytes = size;
					else if (unit == "KB") bytes = (size * 1000);
					else if (unit == "MB") bytes = (size * 1000 * 1000);
					
					win.find("#fileInfoSizeInKB")[0].value(bytes);
					
					// Set the unit. KB or MB. Otherwise: Bytes.
					var unit = p2[1].replace(")","");
					if (unit=='KB' || unit=='MB') {
						win.find("#fileInfoUnit")[0].value(unit);
					} else {
						sizeField.value(bytes);
					}
					
					// Extension
					if (title.indexOf("[") != -1 && title.indexOf(" - ") != -1)	{
						win.find("#fileInfoExtension")[0].value(title.split("[")[1].split("-")[0].trim());
					}
					
					// Show the File Info Block
					toggleFileInfoBlock(true, false); // false = No AJAX request
					
				}
			}
		}
		// / File info
		
		var onfocus = elm.getAttribute("onfocus");
		if (onfocus && onfocus!="") win.find("#onfocus")[0].value(onfocus);
		var onblur = elm.getAttribute("onblur");
		if (onblur && onblur!="") win.find("#onblur")[0].value(onblur);
		var ondblclick = elm.getAttribute("ondblclick");
		if (ondblclick && ondblclick!="") win.find("#ondblclick")[0].value(ondblclick);
		var onmouseover = elm.getAttribute("onmouseover");
		if (onmouseover && onmouseover!="") win.find("#onmouseover")[0].value(onmouseover);
		var onmousemove = elm.getAttribute("onmousemove");
		if (onmousemove && onmousemove!="") win.find("#onmousemove")[0].value(onmousemove);
		var onmouseout = elm.getAttribute("onmouseout");
		if (onmouseout && onmouseout!="") win.find("#onmouseout")[0].value(onmouseout);
		
		// Popup
		if (elm.onclick) {
			var onclick = elm.getAttribute("onclick");
			var parts = onclick.split(";");
			for (var i=0; i<parts.length; i++) {
				var part = parts[i];
				if (part.indexOf("window.open")==0) {
					part = part.replace("window.open(","");
					part = part.substring(0, part.length - 1);
					part = part.replace(",","~~").replace(",","~~");
					part = part.split("~~");
					if (part.length==3) {
						win.find("#ispopup")[0].checked(true);
						win.find("#popupreturn")[0].checked(false);
						for (var z=0;z<part.length;z++) {
							var p = part[z];
							p = p.replace(/'/g, '');
							// popupurl
							if (z==0) {
								if (p!="this.href") win.find("#popupurl")[0].value(p);
							}
							// popupname
							else if (z==1) {
								if (p=="eXeLearningPopup") p = "";
								win.find("#popupname")[0].value(p);
							}
							else if (z==2) {
								// popupwidth
								var popupwidth = p.split(",width=");
								if (popupwidth.length==2) {
									popupwidth = popupwidth[1].split(",")[0];
									win.find("#popupwidth")[0].value(popupwidth);
								} else {
									if (p.indexOf("width=")==0) {
										popupwidth = p.replace("width=","").split(",")[0];
										win.find("#popupwidth")[0].value(popupwidth);
									}
								}
								// popupheight
								var popupheight = p.split(",height=");
								if (popupheight.length==2) {
									popupheight = popupheight[1].split(",")[0];
									win.find("#popupheight")[0].value(popupheight);
								}								
								// popupleft
								var popupleft = p.split(",left=");
								if (popupleft.length==2) {
									popupleft = popupleft[1].split(",")[0];
									if (popupleft.indexOf("+(screen.availWidth")==0) {
										win.find("#popupleft")[0].value("c");
									} else {
										if (!isNaN(parseInt(popupleft))) win.find("#popupleft")[0].value(popupleft);
									}
								}								
								// popuptop
								var popuptop = p.split(",top=");
								if (popuptop.length==2) {
									popuptop = popuptop[1].split(",")[0];
									if (popuptop.indexOf("+(screen.availHeight")==0) {
										win.find("#popuptop")[0].value("c");
									} else {
										if (!isNaN(parseInt(popuptop))) win.find("#popuptop")[0].value(popuptop);
									}
								}								
								// popuplocation
								if (p.indexOf("location=yes")!=-1) win.find("#popuplocation")[0].checked(true);
								// popupscrollbars
								if (p.indexOf("scrollbars=yes")!=-1) win.find("#popupscrollbars")[0].checked(true);
								// popupmenubar
								if (p.indexOf("menubar=yes")!=-1) win.find("#popupmenubar")[0].checked(true);
								// popupresizable
								if (p.indexOf("resizable=yes")!=-1) win.find("#popupresizable")[0].checked(true);
								// popuptoolbar
								if (p.indexOf("toolbar=yes")!=-1) win.find("#popuptoolbar")[0].checked(true);
								// popupstatus
								if (p.indexOf("status=yes")!=-1) win.find("#popupstatus")[0].checked(true);
							}
						}
					}
				} else if (part=="return false") {
					win.find("#popupreturn")[0].checked(true);
				} else {
					if (part!="") {
						var clickField = win.find("#onclick")[0];
						var currVal = clickField.value();
						clickField.value(currVal+part+";");
					}
				}
			}
		}

		// / Popup
		
	}

	editor.addButton('exelink', {
		icon: 'link',
		tooltip: 'Insert/edit link',
		shortcut: 'Meta+K',
		onclick: createLinkList(showDialog),
		stateSelector: 'a[href]'
	});

	editor.addButton('unlink', {
		icon: 'unlink',
		tooltip: 'Remove link',
		cmd: 'unlink',
		stateSelector: 'a[href]'
	});

	editor.addShortcut('Meta+K', '', createLinkList(showDialog));
	editor.addCommand('mceLink', createLinkList(showDialog));

	this.showDialog = showDialog;

	editor.addMenuItem('exelink', {
		icon: 'link',
		text: 'Insert/edit link',
		shortcut: 'Meta+K',
		onclick: createLinkList(showDialog),
		stateSelector: 'a[href]',
		context: 'insert',
		prependToContext: true
	});
	
	editor.on('init', function(e) {
		
		editor.dom.loadCSS(url + "/css/content.css");
		
		// We need global access to the dialog
		// We create $exeTinyMCE.activeDialog if it's not present
		if (typeof($exeTinyMCE)!='undefined') {
			if (typeof($exeTinyMCE.activeDialog)=='undefined') {
				$exeTinyMCE.activeDialog = {
				   win : '',
				   tmp : ''
				}
			}
		}
		
	});
	
});
