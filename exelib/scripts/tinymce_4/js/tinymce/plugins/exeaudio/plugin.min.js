/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Sdweb (http://www.sdweb.es/) for BirtLH (http://www.ulhi.hezkuntza.net/)
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/

 * Button icon by Google (https://material.io/tools/icons/), available under the Apache license version 2.0. (http://www.apache.org/licenses/LICENSE-2.0) 
 * The "Insert/Edit Embedded Media" icon is just part of a TinyMCE screenshot.
 */

/**
 * Record audio, include it in the package resources and create an HTML AUDIO element.
 * You can choose if you want to include a JavaScript player or not. 
 * It requires some server side actions included in eXe (see $exeAuthoring.fileUpload).
 * Original iDevice and server side code by Sdweb.
 * TinyMCE plugin by Ignacio Gros.
 */

// Public object
var eXeAudioRecorder = {
	
	// Tell the user how to complete the audio information
	getInstructions: function(){
		var alt = _("Insert\/Edit Embedded Media");
		var str = _("Use the $ option after recording to define the authorship or the audio title.");
			str = str.replace('$','<img src="/scripts/tinymce_4/js/tinymce/plugins/exeaudio/img/exemedia.png" alt="'+alt+'" title="'+alt+'" width="22" height="22" style="margin:0 2px;width:22px" />');
		return str;
	},
	
	// Get browser name and version
	browserSpecs: function(){
		var ua = navigator.userAgent, tem,
			M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
		if(/trident/i.test(M[1])){
			tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
			return {name:'IE',version:(tem[1] || '')};
		}
		if(M[1]=== 'Chrome'){
			tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
			if(tem != null) return {name:tem[1].replace('OPR', 'Opera'),version:tem[2]};
		}
		M = M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
		if((tem = ua.match(/version\/(\d+)/i))!= null)
			M.splice(1, 1, tem[1]);
		return {name:M[0], version:M[1]};
	},

	// Check browser compatibility
	// MediaRecorder is supported by Chrome 49+, Firefox 30+, Opera 36+, Android Webview 47+ (not by IE)
	checkCompatibility: function() {
		var compatibility = false;
		var browser = this.browserSpecs();
		if (browser.name == "Chrome" && browser.version >= 49) {
			compatibility = true;
		} else if (browser.name == "Firefox" && browser.version >= 65) {
			compatibility = true;
		} else if (browser.name == "Opera" && browser.version >= 36) {
			compatibility = true;
		}
		return compatibility;
	},
	
	// Avoid devices long names
	truncateDeviceName : function(str){
		var n = 65;
		return (str.length > n) ? str.substr(0, n-1) + '...' : str;
	},
	
	// Get the audio input devices (right after loading TinyMCE)
	checkDevices: function(){		
		eXeAudioRecorder.devices = [];		
		eXeAudioRecorder.devices.control = [];		
		navigator.mediaDevices.enumerateDevices()
			.then(function(devices) {
				devices.forEach(function(device) {
					if (device.kind == "audioinput") {
						let item = {text: device.deviceId, value: device.deviceId}
						if (device.label!="") {
							item = {text: eXeAudioRecorder.truncateDeviceName(device.label), value: device.deviceId}
						}
						if (eXeAudioRecorder.devices.control.indexOf(device.deviceId)==-1) {
							eXeAudioRecorder.devices.push(item);
							eXeAudioRecorder.devices.control.push(device.deviceId)	
						}
					}
				});
		});

	},

	// Enable the audio recorder
	enableAudioRecorder: function(editor,win) {
		var audioType = "audio/webm";
		var mediaRecorder;
		var audioInputId;
		var chunks = [];
		var durationSeconds = 0;
		var durationDecimals = 0;
		var timer;
		var durationField = document.getElementById("EAR_Duration")
		var bRecord = document.getElementById("EAR_record-button");
		var bSaveWrapper = document.getElementById("EAR_save");
		var bSave = document.getElementById("EAR_save-button");
		var audioField = document.getElementById('EAR_audioField');
		var menu = document.getElementById("EAR_inputDevices");
		// Timer for audio duration
		function pad (val) { return val > 9 ? val : "0" + val; }
		function setTime() {
			++durationDecimals;
			if (durationDecimals==10) {
				++durationSeconds;
				durationDecimals = 0;
			}
			seconds = pad(durationSeconds%60)
			minutes = pad(parseInt(durationSeconds / 60));
			durationField.innerHTML = minutes+":"+seconds;
		  }
		// Record button
		bRecord.style = RecordAudioDialog.getIcon(RecordAudioDialog.pluginURL,"record");
		bRecord.onclick = function() {
			bSaveWrapper.style.visibility = "visible";
			var audioInputId = win.find("#exeAudioInput")[0].value();
			if (mediaRecorder) {
				if (bRecord.classList.contains("recording") && mediaRecorder.state == "recording") {
					mediaRecorder.pause();
					clearInterval(timer);
					bRecord.innerHTML = _("Continue");
					bRecord.style = RecordAudioDialog.getIcon(RecordAudioDialog.pluginURL,"record");
					bRecord.classList.remove("recording");
					bRecord.classList.add("pause");
				} else if (bRecord.classList.contains("pause") && mediaRecorder.state == "paused") {
					mediaRecorder.resume();
					timer = setInterval(setTime, 100);
					bRecord.innerHTML = _("Pause");
					bRecord.style = RecordAudioDialog.getIcon(RecordAudioDialog.pluginURL,"pause");
					bRecord.classList.add("recording");
				} else if (mediaRecorder.state == "inactive") {
					chunks = [];
					durationSeconds = 0;
					durationDecimals = 0;
					durationField.innerHTML = "00:00";
					initGetUserMedia(audioInputId);
				}
			} else {
				initGetUserMedia(audioInputId);
			}
		}
		// Finish button
		bSaveWrapper.style.visibility = "hidden";
		bSaveWrapper.style.borderLeft = 0;
		bSave.style = RecordAudioDialog.getIcon(RecordAudioDialog.pluginURL,"stop");
		bSave.onclick = function() {
			if (mediaRecorder) {
				mediaRecorder.stop()
				clearInterval(timer);
				bRecord.disabled = false;
				bSave.disabled = true;
				bRecord.style.color = "";
				bSaveWrapper.style.visibility = "hidden";
				bRecord.innerHTML = _("Record");
				bRecord.style = RecordAudioDialog.getIcon(RecordAudioDialog.pluginURL,"record");
				bRecord.classList.remove("recording");
			} else {
				eXe.app.alert(_("Error: Media Recorder"));
			}
		}
		// Upload audio file to /previews/
		function uploadAudioFile() {
			let blob = new Blob(chunks, {'type': audioType});
			ext = audioType.split("/")[1];
			durationMilliseconds = durationSeconds * 1000 + durationDecimals * 100;
			ysFixWebmDuration(blob, durationMilliseconds, function(fixedBlob) {
				fixedBlob.name = (new Date()).getTime()+Math.random().toString(36).substring(2, 15)+"."+ext;
				$exeAuthoring.fileUpload("uploadRecordedAudio",fixedBlob,audioField);
				audioField.classList.add("on");
				audioField.classList.remove("off");
			});
		}
		// Init mediaDevices.getUserMedia & MediaRecord
		function initGetUserMedia(inputId) {
			navigator.mediaDevices.getUserMedia({audio: {deviceId: inputId}})
				.then(function(stream) {
					options = {mimeType: audioType};
					mediaRecorder = new MediaRecorder(stream, options);
					bRecord.disabled = false;
					mediaRecorder.onstop = function() {
						uploadAudioFile();
					}
					mediaRecorder.ondataavailable = function(e) {
						chunks.push(e.data);
					}
					// Start recording
					mediaRecorder.start();
					timer = setInterval(setTime, 100);
					bRecord.innerHTML = _("Pause");
					bRecord.style.backgroundImage = 'url('+RecordAudioDialog.pluginURL+'/img/controls/pause.png)';
					bRecord.classList.add("recording");
					bSave.disabled = false;
					audioField.classList.add("off");
					audioField.classList.remove("on");
					audioField.pause();
					audioField.removeAttribute("controls");
				})
				.catch(function(err) {
					eXe.app.alert(err.message);
			});
		}
		// Get the previous values (so you can overwrite an audio)
		var elm = editor.selection.getNode();
		var c = elm.className;
		if (c && c.indexOf("mce-object ")==0 && c.indexOf(" mce-object-audio")!=-1) {
			if (elm.dataset && elm.dataset["mcePSrc"] && elm.dataset["mcePSrc"]!="") {
				// Load the previous values;
				$("#EAR_audioField")
					.attr("src", elm.dataset["mcePSrc"])
					.attr("controls", "")
					.addClass("on");
				// JavaScript player
				var jsplayer = elm.dataset.mcePClass;
				if (!jsplayer || (jsplayer && jsplayer.indexOf('mediaelement')==-1)) win.find("#jsplayer")[0].checked(false);
			}
		}	
	}
	
}
// TinyMCE Plugin
tinymce.PluginManager.add('exeaudio', function(editor, url) {
	
	RecordAudioDialog = {		
		
		openDialog : function(){

			// Not audio input device
			if (eXeAudioRecorder.devices.length==0) {
				eXe.app.alert(_("There is no audio input device connected."));
				return false;
			}
			
			// Just one input device (we call it "Default")
			if (eXeAudioRecorder.devices.length==1) {
				eXeAudioRecorder.devices = [ { text: _("Default"), value: eXeAudioRecorder.devices[0]['value'] } ]
			}
			
			// Open the window
			win = editor.windowManager.open({
				title: _('Audio recorder'),
				width: 650,
				height: 350,
				body: [
					{
						type: 'container',
						layout: 'flex',
						direction: 'row',
						align: 'center',
						spacing: 15,
						minHeight: 35,
						items: [
							{
								type: 'label',
								text: _('Audio input:'),
								forId: 'exeAudioInput'
							},						
							{
								type: 'listbox',
								name: 'exeAudioInput',
								id: 'EAR_inputDevices',
								'values': eXeAudioRecorder.devices
							}							
						]						
					},
					{
						type: 'container',
						id: 'exeAudioContainer',
						spacing: 15,
						items: [
							{
								type: 'container',
								id: 'exeAudioRecorder',
								html: '<p style="margin:20px 0 10px 0"><b>'+_("Duration:")+'</b> <span id="EAR_Duration">00:00</span></p>'
							},
							{
								type   : 'button',
								name   : 'recordAudio',
								id   : 'EAR_record',
								text   : _("Record")
							},
							{
								type   : 'button',
								name   : 'saveAudio',
								id   : 'EAR_save',
								text   : _("Finish")
							},							
							{
								type: 'container',
								id: 'exeAudioViewer',
								html: '<div style="height:54px;margin-top:10px"><audio id="EAR_audioField" preload="metadata" style="min-height:54px;min-width:350px" controlsList="nodownload"></audio></div>'
							}
						]
					},
					{
						type: 'container',
						layout: 'flex',
						direction: 'column',
						spacing: 15,
						items: [
							{name: 'jsplayer', type: 'checkbox', checked: true, text: _("JavaScript player (for old browsers or browsers that can't play that audio format)")}				
						]
					},
					{
						type: 'container',
						id: 'exeAudioInstructions',
						html: '<div style="margin-top:20px">'+eXeAudioRecorder.getInstructions()+'</div>'
					}					
				],
				onsubmit: function(e) {
					// Include JavaScript player?
					var jsPlayer = "";
					if (win.find("#jsplayer")[0].checked()) jsPlayer = ' class="mediaelement"';
					var audioPath = $("#EAR_audioField").attr("src");
					if (!audioPath || (audioPath.indexOf("resources/")!=0 && audioPath.indexOf("/previews/")!=0) || audioPath.indexOf(".webm")==-1) return false;
					// Insert or update the content
					var fileName = audioPath.split("/");
						fileName = fileName[fileName.length-1];					
					var c = '<audio controls="controls" src="'+audioPath+'"'+jsPlayer+'><a href="'+audioPath+'">'+fileName+'</a></audio>'
						editor.execCommand('mceInsertContent', false, c, {skip_undo : 1});
						editor.windowManager.close();
					return false;
				}
			});
			
			eXeAudioRecorder.enableAudioRecorder(editor,win);
			
		}, // openDialog
		
		getIcon : function(url,icon){
			return "padding-left:26px;background-image:url("+url+"/img/controls/"+icon+".png);background-repeat:no-repeat;background-position:6px 50%";
		}
		
	} // RecordAudioDialog

	// Save the plugin URL
	RecordAudioDialog.pluginURL = url;
	
	if (eXeAudioRecorder.checkCompatibility()==true) {
		
		// Plugin button
		editor.addButton('exeaudio', {
			image: url + '/img/exeaudio.svg',
			tooltip: _('Audio recorder'),
			onclick: RecordAudioDialog.openDialog
		});
		
		// Check the available audio input devices
		editor.on('init', function(e) {
			eXeAudioRecorder.checkDevices();
		});
		
	}
	
});