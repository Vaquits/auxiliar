/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Create/edit modal dialogs (inline content in prettyPhoto)
 * To be used with prettyPhoto: /webui/scripts/exe_lightbox/*.*
 * prettyPhoto, by Stephane Caron, is licensed under the GPLv2 or CC-BY-2.5
 */
tinymce.PluginManager.add('modalwindow', function(editor, url) {
	
	ModalWindowDialog = {
		
		getCurrentValues : function(){
			var elm;
			var inst = tinyMCE.activeEditor;
			elm = inst.selection.getNode();
			elm = inst.dom.getParent(elm, "A");
			if (elm != null) {
				
				var ref = inst.dom.getAttrib(elm, 'href');
				var tit = inst.dom.getAttrib(elm, 'title');
				
				// Set the Link (common)
				var href = document.getElementById('href');
				href.value=ref;
				
				// Set the Title
				document.getElementById('title').value = tit;
				
				// Set the dialog content
				var id = inst.dom.getAttrib(elm, 'id');
				id = id.replace("link","t");
				var e = inst.dom.select("#"+id);
				var e = inst.contentWindow.document.getElementById(id);
				if (e) {
					if (ref.indexOf("#")==0) href.value = "#";
					win.find('#htmlSource')[0].value(e.innerHTML);
				}
				
			}
		},
		
		hasHTML : function(str){
			var a = document.createElement('div');
			a.innerHTML = str;
			for (var c = a.childNodes, i = c.length; i--; ) {
				if (c[i].nodeType == 1) return true; 
			}
			return false;
		},
		
		generateID : (function() {
			function s4() {
				return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
			}
			return function() {
				return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
			};
		})(),

		setAttribs : function(elm,type) {
			var editor = tinyMCE.activeEditor;
			editor.dom.setAttrib(elm, 'href', win.find("#href")[0].value().replace(/ /g, '%20'));
			editor.dom.setAttrib(elm, 'title', win.find("#title")[0].value());
            var e = jQuery(elm);
            var r = e.attr("rel");
            var v = 'lightbox';
            if (r && r.indexOf('lightbox')>-1) v = r;
			jQuery(elm).addClass('exe-dialog-link').attr("rel",v).removeAttr("target");
		},

		insert : function(content){
			
			var inst = tinyMCE.activeEditor;
			
			var title = win.find('#title')[0].value();
			var content = win.find('#htmlSource')[0].value();
			if (content=="") {
				inst.windowManager.alert(_('Please write the Content'));
				return false;
			}
		
			var elm, elementArray, i, inst;
			elm = inst.selection.getNode();
			elm = inst.dom.getParent(elm, "A");
			
			// Create new anchor elements
			if (elm == null) {
				inst.getDoc().execCommand("unlink", false, null);
				inst.execCommand("mceInsertLink", false, "#mce_temp_url#", {skip_undo : 1});
				elementArray = tinymce.grep(inst.dom.select("a"), function(n) {return inst.dom.getAttrib(n, 'href') == '#mce_temp_url#';});
				for (i=0; i<elementArray.length; i++) {
					ModalWindowDialog.setAttribs(elm = elementArray[i]);
				}
			} else {
				ModalWindowDialog.setAttribs(elm);
			}
			
			// Don't move caret if selection was image
			if (elm.childNodes.length != 1 || elm.firstChild.nodeName != 'IMG') {
				inst.focus();
				inst.selection.select(elm);
				inst.selection.collapse(0);
			}		
			
			// Wrap it if needed
			if (!ModalWindowDialog.hasHTML(content)) content = "<p>"+content+"</p>";	
			
			// Get the link ID
			var id = "";
			id = inst.dom.getAttrib(elm, 'id');
			if (id=="") id = "link"+ModalWindowDialog.generateID();
			id = id.replace("link","t");
			if (id!="") {
				
				var e = inst.dom.select("#"+id);
				// Create or update the content
				if (e.length==0) {
					inst.dom.add(inst.getBody(), 'div', { id : id, class : 'exe-dialog-text js-hidden' }, content);
				} else {
					inst.dom.setHTML(e, content);
				}
				
			}
			
			inst.dom.setAttribs(elm, {
				// Make sure that you link to the anchor
				'href': '#'+id,
				// Update the id too
				'id': id.replace("t","link")
			});
			
			// Get the text of the link and show it in the editor
			if (typeof(jQuery)=='function') {
				var d = inst.getDoc();
				var dt = jQuery("a[href$='"+id+"']",d);
				if (dt.length==1) {
					var linkText = dt.text();
					if (linkText!="") {
						var s = '<style type="text/css">#'+id+':before{content:"'+inst.translate("Dialog Window")+' - '+linkText+'"}</style>';
						jQuery("HEAD",d).append(s);
					}
				}
			}
		
			inst.execCommand("mceEndUndoLevel");
			inst.windowManager.close();	
			
		},
		
		open : function(){
			
			// var editor = tinyMCE.activeEditor;
			var se = editor.selection;
			var a = editor.dom.getParent(se.getNode(), 'A');
			if (se.isCollapsed() && !a) {
				editor.windowManager.alert(_("No selection and not in link"));
				return false;
			}		
			
			win = editor.windowManager.open({
				title: _('Dialog Window'),
				body: [
					{
						type: 'label',
						text: _('Dialog title (the title of the link)'),
						forId: 'title'
					},	
					{
						name: 'title',
						id: 'title',
						type: 'textbox'
					},					
					{
						name: 'href',
						id: 'href',
						type: 'textbox',
						visible: false
					},
					{
						type: 'label',
						text: _('Write the content of the dialog. You may use HTML and edit it in the editor.'),
						forId: 'htmlSource'
					},					
					{
						name: 'htmlSource',
						id: 'htmlSource',
						type: 'textbox',
						multiline: true
					}					
				],
				onSubmit: ModalWindowDialog.insert
			});			
			
			ModalWindowDialog.getCurrentValues();
			
		},
		
		activateButton : function(node) {
			
			var nodeName = node.nodeName;
			var activate = false;
			var parentA = editor.dom.getParent(node, 'A');
			
			if (nodeName=="A" && node.className.indexOf("exe-dialog-link")!=-1) activate = true;
			else if (parentA && parentA.className.indexOf("exe-dialog-link")!=-1) activate = true;
			
			return activate;

		}
		
	} // ModalWindowDialog
	
	editor.addButton('modalwindow', {
		tooltip: _('Dialog Window'),
		image: url + '/img/modalwindow.png',
		onclick: ModalWindowDialog.open,
		onPostRender: function() {
			var ctrl = this;
			editor.on('NodeChange', function(e) {
				ctrl.active(ModalWindowDialog.activateButton(e.element));
			});
		}		
	});
	
	editor.addMenuItem('modalwindow', {
		text: _('Dialog Window'),
		image: url + '/img/modalwindow.png',
		onclick: ModalWindowDialog.open,
		context: 'insert'
	});
	
	editor.on('init', function(e) {
		
		editor.dom.loadCSS(url + "/css/content.css");
		
		// jQuery is required
		if (typeof(jQuery)!='function') {
			alert(tinymce.translate('Dialog Window')+": "+tinymce.translate('jQuery is required'));
			return false;			
		}
		
		// i18n in CSS (texts in the right language)
		var d = editor.getDoc();
		var s = '<style type="text/css">';
			// Default title
			s += '.exe-dialog-text:before{content:"'+tinymce.translate('Dialog Window')+'"}';
			// Get the text of each dialog to replace the default value
			jQuery(".exe-dialog-text",d).each(function(){
				var dt = jQuery("a[href$='"+this.id+"']",d);
				if (dt.length==0) {
					// Content not found
					s += '#'+this.id+':before{content:"'+tinymce.translate('Dialog Window')+' - '+tinymce.translate("Link not found")+'"}';
				} else if (dt.length==1) {
					var content = dt.text();
					if (content!="") s += '#'+this.id+':before{content:"'+tinymce.translate('Dialog Window')+' - '+content+'"}';
				}
			});				
			s += '</style>';
		jQuery("HEAD",d).append(s);	
		
	});
	
});